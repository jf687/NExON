% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/net_gen.R
\name{create_Cn_networks}
\alias{create_Cn_networks}
\title{create_Cn_networks()}
\usage{
create_Cn_networks(
  P = 50,
  Cn = 3,
  seed_1 = 123,
  seed_2 = 123,
  frac_change = 0.2,
  Ns_sample = c(150, 150, 150)
)
}
\arguments{
\item{P}{The number of variables in the networks. i.e. PxP precision matrices are generated.}

\item{Cn}{The number of precision matrices (/adjacency matrices) that you want to generate.}

\item{seed_1}{Sets the seed for the random generation of the initial, scale-free precision matrix.
This seed will iteratively increase by 1 until positive definite solutions are found. The final seed is stored in output and printed to speed up future function usages.}

\item{seed_2}{Sets the seed for data generation}

\item{frac_change}{The fraction of non-zero entries to the first precision matrix that will disappear, equal to the number that will appear.}

\item{Ns_sample}{For data generation, the set from which the number of samples taken using each precision matrix will be randomly drawn from.}
}
\value{
\itemize{
\item $Omegas : The set of precision matrices.
\item $Ys : The corresponding simulated data.
\item $Ns : The number of drawn samples for each network.
\item $neg_id : The indices of disappearing edges.
\item $pos_id : The indices of appearing edges.
\item $As : The adjacency matrices correspoding to the precision matrices.
}
}
\description{
Implements an algorithm that generates symmetric positive definite precision matrices, where a fraction of entries are (linearly)
dependent on the covariate ordinal value that corresponds to each matrix. The function also generates normally distributed data
using the inverses of the precision matrices it generates, which can be used in simulations.
}
\examples{
create_Cn_networks()
create_Cn_networks(P = 100, Cn = 4, frac_change = 0.4)
}
